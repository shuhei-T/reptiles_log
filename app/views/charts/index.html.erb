<% content_for(:title, @reptile.name + "|" + t('.title')) %>
<div class="container chart-index" style="margin-bottom: 60px;">
  <h1 class="chart"><%= t('.title') %></h1>
  <div class="row">
    <div class="left_column">
      <%= image_tag @reptile.image.url, class: 'rounded-circle card-img-top', size: '20x20' %>
      <%= link_to reptile_path(@reptile) do %>
        <span class="reptile_name"><%= @reptile.name %></span>
      <% end %>
    </div>
    <div class="button-type pb-2 mb-2">
      <button type="button" class="btn btn-outline-primary active" data-mode="weight">体重</button>
      <button type="button" class="btn btn-outline-primary" data-mode="length">体長</button>
      <button type="button" class="btn btn-outline-primary" data-mode="temperature">温度</button>
      <button type="button" class="btn btn-outline-primary" data-mode="humidity">湿度</button>
    </div>
    <div class="period border-bottom pb-2 mb-2">
      期間<br>
      <input type="text" class="form-control d-inline-block datepicker" style="width: 160px;" id="startDate"> 〜 <input type="text" class="form-control d-inline-block datepicker" style="width: 160px;" id="endDate">
    </div>

    <div style="position: relative; height:60vh; width:100vw;">
      <canvas id="myChart"></canvas>
    </div>
  </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
  let myChart;
  let mode = 'weight';
  let chartData = {};
  chartData.label = {
    'weight': '体重(g)',
    'length': '体長(cm)',
    'temperature': '温度(℃)',
    'humidity': '湿度(%)'
  };
  chartData.date = {
    'weight': <%= @weight_day %>,
    'length': <%= @length_day %>,
    'temperature': <%= @temperature_day %>,
    'humidity': <%= @humidity_day %>
  };


  chartData.weight = <%= @weight %>;
  chartData.length = <%= @length %>;
  chartData.temperature = <%= @temperature %>;
  chartData.humidity = <%= @humidity %>;
  
  chartData.backgroundColor={
    'weight': 'rgba(58, 50, 168, 0.2)',
    'length': 'rgba(255, 80, 120, 0.2)',
    'temperature': 'rgba(252, 94, 3, 0.2)',
    'humidity': 'rgba(3, 248, 252, 0.2)'
  };

  chartData.borderColor ={
    'weight': 'rgba(58, 50, 168, 1.0)',
    'length': 'rgba(255, 80, 120, 1.0)',
    'temperature': 'rgba(252, 94, 3, 1.0)',
    'humidity': 'rgba(3, 248, 252, 1.0)'
  };

  chartData.min = 0;
  chartData.max = chartData.date.length;

  function drawMyChart() {
    const ctx = document.getElementById('myChart').getContext('2d');
      if (myChart) {
      myChart.destroy();
    }
  
    myChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: chartData.date[mode],
          datasets: [{
            label: chartData.label[mode],
            data: chartData[mode],
            fill: false,
            borderWidth: 2,
            backgroundColor: chartData.backgroundColor[mode],
            borderColor: chartData.borderColor[mode],
            tension: 0.1,
            spanGaps: true
          }]
        },
        options: {
            scales: {
                x: {
                  ticks: {
                    autoSkip: true,
                    maxTicksLimit: '14'
                  },
                  min: chartData.min,
                  max: chartData.max
                },
                y: {
                  type: 'linear',
                  position: 'left',
                  beginAtZero: true
                }
            },
            maintainAspectRatio: false
        }
    });
  };
  drawMyChart();

  // グラフ切り替え
  let btns = document.querySelectorAll('.button-type button');
  for(let i = 0; i < btns.length; i++ ){
    btns[i].addEventListener('click', function() {
      if(!(this).classList.contains('active')) {
        let active_button = document.querySelector('.active');
        active_button.classList.remove('active');
        this.classList.add('active');
        mode = this.dataset.mode;
        drawMyChart()
      }
    }, false);
  }


  const Dates = chartData.date[mode];
  console.log(Dates);
  const MinDate = Dates[0];
  const MaxDate = Dates.slice(-1)[0];
  console.log(MinDate);
  console.log(MaxDate);
  
  let MinDateCustom = new Date(MinDate);
  MinDateCustom.setDate(MinDateCustom.getDate() - 1);
  const MinDateYesterday = MinDateCustom.getFullYear() + '-' + ('0' + (MinDateCustom.getMonth() + 1)).slice(-2) + '-' +('0' + MinDateCustom.getDate()).slice(-2)
  let MaxDateCustom = new Date(MaxDate);
  MaxDateCustom.setDate(MaxDateCustom.getDate() + 1);
  const MaxDateTomorrow = MaxDateCustom.getFullYear() + '-' + ('0' + (MaxDateCustom.getMonth() + 1)).slice(-2) + '-' +('0' + MaxDateCustom.getDate()).slice(-2)

  jQuery.datetimepicker.setLocale('ja');
  jQuery('.datepicker').datetimepicker({
    step: 10,
    format: 'y/m/d h:t',
    onSelectDate: function(dateText, inst){
      const dateTextFormat = dateText.getFullYear() + '-' + ('0' + (dateText.getMonth() + 1)).slice(-2) + '-' +('0' + dateText.getDate()).slice(-2) + ' ' +  ('0' + dateText.getHours()).slice(-2) + ':' + ('0' + dateText.getMinutes()).slice(-2)
      
      // if (dateTextFormat < MinDateYesterday || dateTextFormat > MaxDateTomorrow) {
      //   alert('日付が存在しません');
      //   return false;
      // }
      console.log(jQuery(inst).attr('id'));
      if (jQuery(inst).attr('id') == 'startDate') {
        let MinValue = Dates.find(e => e > dateTextFormat);
        chartData.min = MinValue;
      } else {
        let MaxValue;
        for (let i = 0; i < Dates.length; i++) {
          if (Dates[i] <= dateTextFormat) {
            MaxValue = Dates[i];
          }
        }
        chartData.max = MaxValue;
      }
      drawMyChart();
    }
  });

  jQuery('.period input').on('input', function(event) {
    if (!this.value) {
      if ( this.getAttribute('id') == 'startDate' ) {
        chartData.min = 0;
      } else {
        chartData.max = chartData.date.length;
      }
      drawMyChart();
    }
  });
});
</script>